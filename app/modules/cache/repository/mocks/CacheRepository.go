// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CacheRepository is an autogenerated mock type for the CacheRepository type
type CacheRepository struct {
	mock.Mock
}

// CreateCache provides a mock function with given fields: ctx, key, data, ttl
func (_m *CacheRepository) CreateCache(ctx context.Context, key string, data interface{}, ttl time.Duration) {
	_m.Called(ctx, key, data, ttl)
}

// DelCache provides a mock function with given fields: ctx, key
func (_m *CacheRepository) DelCache(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DelCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCache provides a mock function with given fields: ctx, key, res
func (_m *CacheRepository) GetCache(ctx context.Context, key string, res interface{}) {
	_m.Called(ctx, key, res)
}

// NewCacheRepository creates a new instance of CacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepository {
	mock := &CacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
